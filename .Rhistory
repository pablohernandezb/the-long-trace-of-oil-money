set.seed(47401)         # Set a seed for reproducible results
library(statnet)
library(rgl)
?network
nodes <- read.csv("chavismoinc_nodes.csv", header=T, as.is=T)
edges <- read.csv("chavismoinc_edges.csv", header=T, as.is=T)
library(network)
corrupt_net_1 <- network(edges, vertex.attr=nodes, matrix.type="edgelist",
loops=F, multiple=F, ignore.eval = F, directed = F)
corrupt_net_1[,]
corrupt_net_1 %n% "net.name" <- "Corruption Network in Venezuela" #  set the network attribute "net.name" to "Media Network"
corrupt_net_1 %n% "net.name"
corrupt_net_1 %v% "country"
corrupt_net_1 %e% "type"
plot(corrupt_net_1, vertex.cex=(corrupt_net_1 %v% "country_size")/5)
summary(corrupt_net_1)
network.dyadcount(corrupt_net_1)
network.edgecount(corrupt_net_1)
network.size(corrupt_net_1)
as.sociomatrix(corrupt_net_1)
plot(corrupt_net_1, vertex.cex=(corrupt_net_1 %v% "country_size")/5, mode = "circle")
plot(corrupt_net_1, vertex.cex=(corrupt_net_1 %v% "country_size")/5, mode = "kamadakawai")
summary(nodes$country_size)
corrupt_net_1 %v% "col" <- c("dodgerblue4", "dodgerblue3", "dodgerblue2", "dodgerblue1", "dodgerblue")[corrupt_net_1 %v% "country_size"]
corrupt_net_1 %v% "col" <- c("dodgerblue4", "dodgerblue3", "dodgerblue2", "dodgerblue1", "dodgerblue")[(corrupt_net_1 %v% "country_size")+1]
corrupt_net_1 %v% "col" <- c("dimgray","dodgerblue4", "dodgerblue3", "dodgerblue2", "dodgerblue1", "dodgerblue")[(corrupt_net_1 %v% "country_size")+1]
plot(corrupt_net_1, vertex.cex=(corrupt_net_1 %v% "country_size")/5, vertex.col = (corrupt_net_1 %v% "col"))
corrupt_net_1 %v% "col" <- c("dimgray","gold", "orange", "tomato", "orangered", "red")[(corrupt_net_1 %v% "country_size")+1]
plot(corrupt_net_1, vertex.cex=(corrupt_net_1 %v% "country_size")/5, vertex.col = (corrupt_net_1 %v% "col"))
summary(corrupt_net_1 %v% "col")
summary(nodes$country_size)
summary(nodes %V% country_size)
summary(nodes %V% "country_size")
histogram(nodes$country_size)
hist(nodes$country_size)
table(nodes$country_size)
nodes$country_size[nodes$country_size == -1] <- 0
table(nodes$country_size)
nodes <- read.csv("chavismoinc_nodes.csv", header=T, as.is=T)
nodes$country_size[nodes$country_size == -1] <- 0
corrupt_net_1 <- network(edges, vertex.attr=nodes, matrix.type="edgelist",
loops=F, multiple=F, ignore.eval = F, directed = F)
corrupt_net_1 %v% "col" <- c("dimgray","gold", "orange", "tomato", "orangered", "red")[corrupt_net_1 %v% "country_size"]
corrupt_net_1 %v% "col" <- c("dimgray","gold", "orange", "tomato", "orangered", "red")[corrupt_net_1 %v% "country_size"]
plot(corrupt_net_1, vertex.cex=(corrupt_net_1 %v% "country_size")/5, vertex.col = (corrupt_net_1 %v% "col"))
?gden
gden(corrupt_net_1, mode = "graph")
corrupt_net_d <- network(edges, vertex.attr=nodes, matrix.type="edgelist",
loops=F, multiple=F, ignore.eval = F, directed = T)
InDegree <- degree(corrupt_net_d, cmode="indegree")     #Computing the in-degree of each node
OutDegree <- degree(corrupt_net_d, cmode="outdegree")
par(mar = rep(2, 4))
par(mfrow=c(2,2)) # Set up a 2x2 display
hist(InDegree, xlab="Indegree", main="In-Degree Distribution", prob=FALSE)
hist(OutDegree, xlab="Outdegree", main="Out-Degree Distribution", prob=FALSE)
hist(InDegree+OutDegree, xlab="Total Degree", main="Total Degree Distribution", prob=FALSE)
par(mfrow=c(1,1)) # Restore display
corrupt_Geo <- geodist(corrupt_net_1, inf.replace=0)
corrupt_Geo
corrupt_Geo$gdist
Geo_Dist = corrupt_Geo$gdist
hist(Geo_Dist)
summary(Geo_Dist)
average.path.length(corrupt_net_d, directed=F, unconnected=TRUE)
mutuality(corrupt_net_1)
mutuality(corrupt_net_d)
grecip(corrupt_network_1, measure="dyadic")
grecip(corrupt_net_1, measure="dyadic")
grecip(corrupt_net_1, measure="edgewise")
grecip(corrupt_net_d, measure="dyadic")
grecip(corrupt_net_d, measure="edgewise")
triad.census(corrupt_net_d)
plot(triad.census(corrupt_net_d))
cutpoints(corrupt_network_d, connected="strong")
cutpoints(corrupt_net_d, connected="strong")
gplot(corrupt_net_d,vertex.col=2+cutpoints(corrupt_net_d,mode="graph",return.indicator=T))
Corrupt_Cut <- corrupt_net_d[-11,-11]
components(Corrupt_Cut, connected="strong")
components(corrupt_net_d, connected="strong")
Corrupt_Comp$membership
Corrupt_Comp <- component.dist(corrupt_net_d, connected="strong")
Corrupt_Comp
Corrupt_Comp$membership
Corrupt_Comp$membership
Corrupt_Comp$csize
sum(Corrupt_Comp$csize)
summary(Corrupt_Comp$csize)
hist(Corrupt_Comp$csize)
table(COrrupt_Comp$csize)
table(Corrupt_Comp$csize)
components(corrupt_net_d, connected="weak")
components(corrupt_net_d, connected="strong")
bicomponent.dist(corrupt_net_d)
Corrupt_BiComp <- bicomponent.dist(corrupt_net_d)
kcores(corrupt_net_d)
Corrupt_kc<-kcores(corrupt_net_d,cmode="indegree")
gplot(corrupt_net_d,vertex.col=rainbow(max(Corrupt_kc)+1)[Corrupt_kc+1])
gplot(corrupt_net_d[Corrupt_kc>3,Corrupt_kc>3],vertex.col=rainbow(max(Corrupt_kc)+1)[Corrupt_kc[Corrupt_kc>3]+1])
set.network.attribute(corrupt_net_d, "directed", FALSE)
Corrupt_Cliques <- clique.census(corrupt_net_d, mode = "graph", clique.comembership="sum")
cORRUPT_Cliques$clique.count
Corrupt_Cliques$clique.count
Corrupt_Cliques$clique.comemb
Corrupt_Cliques$clique.comemb
Corrupt_Cliques$cliques[[4]]
Corrupt_Cliques$cliques[[3]]
length(Corrupt_Cliques$cliques[[4]])
length(Corrupt_Cliques$cliques[[3]])
length(Corrupt_Cliques$cliques[[2]])
length(Corrupt_Cliques$cliques[[1]])
set.network.attribute(AHS_Network, "directed", TRUE)
set.network.attribute(corrupt_net_d, "directed", TRUE)
reachability(corrupt_net_d)
Corrupt_Reach <- reachability(corrupt_net_d)
InDegree <- degree(corrupt_net_d, cmode="indegree")
InDegree <- InDegree * .15
set.vertex.attribute(corrupt_net_d, "InDegree", InDegree)
OutDegree <- degree(corrupt_net_d, cmode="outdegree")
OutDegree <- OutDegree * .5
set.vertex.attribute(corrupt_net_d, "OutDegree", OutDegree)
TotalDegree <- OutDegree + InDegree
TotalDegree <- TotalDegree * .4
set.vertex.attribute(AHS_Network, "TotalDegree", TotalDegree)
set.vertex.attribute(corrupt_net_d, "TotalDegree", TotalDegree)
set.seed(12345)
ggnetwork(corrupt_net_d) %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "lightgray") +
geom_nodes(color = Color_Race, size = InDegree) +
#geom_nodelabel_repel (color = Race, label = Race) +#   For networks with fewer nodes, we might want to label
theme_blank() +
geom_density_2d()
library(ggplot2)
set.seed(12345)
ggnetwork(corrupt_net_d) %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "lightgray") +
geom_nodes(color = Color_Race, size = InDegree) +
#geom_nodelabel_repel (color = Race, label = Race) +#   For networks with fewer nodes, we might want to label
theme_blank() +
geom_density_2d()
as.data.frame(corrupt_net_d) %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "lightgray") +
geom_nodes(color = Color_Race, size = InDegree) +
#geom_nodelabel_repel (color = Race, label = Race) +#   For networks with fewer nodes, we might want to label
theme_blank() +
geom_density_2d()
set.seed(12345)
as.data.frame(corrupt_net_d) %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "lightgray") +
geom_nodes(color = Color_Race, size = InDegree) +
#geom_nodelabel_repel (color = Race, label = Race) +#   For networks with fewer nodes, we might want to label
theme_blank() +
geom_density_2d()
set.seed(47401)         # Set a seed for reproducible results
library(statnet)
library(rgl)
search()
save.image("C:/Users/pabherna/OneDrive - Texas Tech University/Spring 2021/POLS 5367 - International Political Economy/Research Paper/data/workspace.RData")
